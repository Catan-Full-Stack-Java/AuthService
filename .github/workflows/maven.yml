# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Step 3: Build with Maven
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Step 4: Configure AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 5: Cache Maven Dependencies
    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashfiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 6: Run Tests
    - name: Run Tests
      run: mvn test -Dspring.profiles.active=test

    # Step 7: Build with Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -Dspring.profiles.active=test

    # Step 8: Install Newman
    - name: Install Newman
      run: npm install -g newman

    # Step 9: Build Docker Image
    - name: Build Docker Image
      run: docker build -t catan-auth-api .

    # Step 10: Run Docker Container
    - name: Run Docker Container
      run: |
        docker run -d \
          --name catan-auth-api \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_REGION=${{ secrets.AWS_REGION }} \
          -p 8080:8080 \
          catan-auth-api

    # Step 11: Wait for Service to Start
    - name: Wait for Auth Service
      run: |
        for i in {1..60}; do
          curl -sSf http://localhost:8080/actuator/health && break || sleep 5;
        done
      shell: bash


    # Step 12: Run Newman Tests
    - name: Run Newman Tests
      run: |
          run /tests/postman/collection.json \
          -e /tests/postman/environment.json \
          --iteration-data /tests/postman/registerAPITestData.json \
          --reporters cli,json \
          --reporter-json-export results.json

    # Step 13: Upload Newman Test Results
    - name: Upload Newman Test Results
      uses: actions/upload-artifact@v3
      with:
        name: newman-report
        path: results.json

    # Step 14: Docker Tear Down
    - name: Docker Tear Down
      run: docker stop catan-auth-api && docker rm catan-auth-api
  
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Submit Dependency Snapshot
      uses: advanced-security/maven-dependency-submission-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

